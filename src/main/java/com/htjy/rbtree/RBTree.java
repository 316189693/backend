package com.htjy.rbtree;

/**
 * 红黑树---自平衡二叉树
 * 特性：
 * 1> 节点是红色或者黑色
 * 2> 根节点是黑色
 * 3> 所有叶子节点都是黑色(叶子节点是NIL节点， 也叫‘哨兵’)
 * 4>每个红色节点的两个子节点都是黑色（每个叶子节点到根节点的所有路径上不能有两个连续的红色节点）
 * 5>从任一节点到每个叶子节点的所有简单路径都包含相同数目的黑色节点
 *
 * 1.左旋
 *  如果P的右节点是空的，直接返回
 *  1） P的右节点替换P的位置；
 *  2）P作为原右节点的左节点；
 *  3）原右节点的左节点做P节点的右节点
 *  4）如果P原来是Root节点， 则要把原来P的右节点设为Root节点
 * 2.右旋
 *  *  如果P的左节点是空的，直接返回
 *  *  1） P的左节点替换P的位置；
 *  *  2）P作为原左节点的右节点；
 *  *  3）原左节点的右节点做P节点的左节点
 *  *  4）如果P原来是Root节点， 则要把原来P的左节点设为Root节点
 */
public class RBTree {
}
